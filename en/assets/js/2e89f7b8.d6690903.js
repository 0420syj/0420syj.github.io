"use strict";(self.webpackChunk_0420_syj_github_io=self.webpackChunk_0420_syj_github_io||[]).push([[3504],{5620:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=o(n),m=r,y=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=n(557),r=(n(6687),n(5620));const i={slug:"typescript-basic",title:"TypeScript Basic\ud83d\udc24",description:"I've summarized the basics of TypeScript.",image:"./images/preview.png",authors:["wannysim"],tags:["typescript"],enableComments:!0},l=void 0,s={permalink:"/en/blog/typescript-basic",editUrl:"https://github.com/0420syj/0420syj.github.io/tree/master/i18n/en/docusaurus-plugin-content-blog/2023-04-16-typescript-basic/index.md",source:"@site/i18n/en/docusaurus-plugin-content-blog/2023-04-16-typescript-basic/index.md",title:"TypeScript Basic\ud83d\udc24",description:"I've summarized the basics of TypeScript.",date:"2023-04-16T00:00:00.000Z",formattedDate:"April 16, 2023",tags:[{label:"typescript",permalink:"/en/blog/tags/typescript"}],readingTime:5.905,hasTruncateMarker:!0,authors:[{name:"Wan Sim",title:"Frontend Developer @ HandHug",url:"https://github.com/0420syj",imageURL:"https://avatars.githubusercontent.com/u/22449484",key:"wannysim"}],frontMatter:{slug:"typescript-basic",title:"TypeScript Basic\ud83d\udc24",description:"I've summarized the basics of TypeScript.",image:"./images/preview.png",authors:["wannysim"],tags:["typescript"],enableComments:!0},prevItem:{title:"(JS) Closure\uc640 Method Chaining \ud83d\udd17",permalink:"/en/blog/js-closure-and-method-chaining"},nextItem:{title:"Copilot for CLI Experience \ud83e\udd16",permalink:"/en/blog/github-copilot-cli"}},p={image:n(9451).Z,authorsImageUrls:[void 0]},o=[{value:"Introduction to Typescript",id:"introduction-to-typescript",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Basic syntax and types",id:"basic-syntax-and-types",level:2},{value:"array",id:"array",level:3},{value:"tuple",id:"tuple",level:3},{value:"enum",id:"enum",level:3},{value:"any",id:"any",level:3},{value:"function",id:"function",level:3},{value:"void",id:"void",level:3},{value:"null and undefined",id:"null-and-undefined",level:3},{value:"never",id:"never",level:3},{value:"object",id:"object",level:3},{value:"Concepts in Typescript",id:"concepts-in-typescript",level:2},{value:"Type Inference",id:"type-inference",level:3},{value:"Type Assertions",id:"type-assertions",level:3},{value:"Literal Narrowing",id:"literal-narrowing",level:3},{value:"Union Types",id:"union-types",level:3},{value:"Type Guards",id:"type-guards",level:3},{value:"Type Compatibility",id:"type-compatibility",level:3},{value:"Type Aliases",id:"type-aliases",level:3},{value:"Interface and Class",id:"interface-and-class",level:2},{value:"Interface",id:"interface",level:3},{value:"Class",id:"class",level:3},{value:"Module and Namespace",id:"module-and-namespace",level:2},{value:"Module",id:"module",level:3},{value:"Namespace",id:"namespace",level:3}],u={toc:o},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"I've summarized the basics of TypeScript."),(0,r.kt)("h2",{id:"introduction-to-typescript"},"Introduction to Typescript"),(0,r.kt)("p",null,"Typescript is a superset of Javascript that extends the functionality of Javascript by adding static types. Typescript is designed to be compatible with existing Javascript code while making it easier to write and maintain large applications."),(0,r.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,r.kt)("p",null,"Article is broken down into four parts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#basic-syntax-and-types"},"Basic syntax and types")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#concepts-in-typescript"},"Concepts in Typescript")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#interface-and-class"},"Interface and Class")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#module-and-namespace"},"Module and Namespace"))),(0,r.kt)("h2",{id:"basic-syntax-and-types"},"Basic syntax and types"),(0,r.kt)("p",null,"There are a few basic types in Typescript that can be used to add type annotations to variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number"),": number"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string"),": text"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean"),": true or false"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"any"),": any type, if you don't want to specify a type")),(0,r.kt)("p",null,"Here's an example of how to declare a variable using a type annotation in Typescript:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let firstName: string = "John";\nlet age: number = 30;\nlet isStudent: boolean = false;\n')),(0,r.kt)("h3",{id:"array"},"array"),(0,r.kt)("p",null,"In Typescript, an array is written like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let numbers: number[] = [1, 2, 3];\nlet names: string[] = ["John", "Jane", "Bob"];\n\n// Or\n\nlet numbers: Array<number> = [1, 2, 3];\n')),(0,r.kt)("h3",{id:"tuple"},"tuple"),(0,r.kt)("p",null,"A tuple is an array of fixed length, where each element can have a specific type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let person: [string, number] = ["John", 30];\n')),(0,r.kt)("h3",{id:"enum"},"enum"),(0,r.kt)("p",null,"An enum is a set of constants with names."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"enum Color {\n  Red,\n  Green,\n  Blue,\n}\n\nlet c: Color = Color.Green;\n")),(0,r.kt)("h3",{id:"any"},"any"),(0,r.kt)("p",null,"any represents any type. any skips type checking, so you lose type safety."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let notSure: any = 4;\n\nnotSure = "maybe a string instead";\n\nnotSure = false; // okay, definitely a boolean\n')),(0,r.kt)("h3",{id:"function"},"function"),(0,r.kt)("p",null,"In TypeScript, a function is written like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function add(a: number, b: number): number {\n  return a + b;\n}\n")),(0,r.kt)("h3",{id:"void"},"void"),(0,r.kt)("p",null,"void is the return type for functions that have no return value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'function warnUser(): void {\n  console.log("This is my warning message");\n}\n')),(0,r.kt)("h3",{id:"null-and-undefined"},"null and undefined"),(0,r.kt)("p",null,"Each of null and undefined has its own type. By default, null and undefined are subtypes of all types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let u: undefined = undefined;\n\nlet n: null = null;\n")),(0,r.kt)("h3",{id:"never"},"never"),(0,r.kt)("p",null,"never represents a value that will never occur. never can be used as the return type of a function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"function error(message: string): never {\n  throw new Error(message);\n}\n")),(0,r.kt)("h3",{id:"object"},"object"),(0,r.kt)("p",null,"object represents all types except primitive types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'declare function create(o: object | null): void;\n\ncreate({ prop: 0 }); // OK\n\ncreate(null); // OK\n\ncreate(42); // Error\n\ncreate("string"); // Error\n\ncreate(false); // Error\n\ncreate(undefined); // Error\n')),(0,r.kt)("h2",{id:"concepts-in-typescript"},"Concepts in Typescript"),(0,r.kt)("h3",{id:"type-inference"},"Type Inference"),(0,r.kt)("p",null,"Type inference is how Typescript infers types. If you don't specify the type of a variable, Typescript will infer the type of the variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let a = 1 + 2; // a is inferred to be of type number.\n\nlet b = [1, null]; // b is inferred to be of type (number | null)[].\n\nlet c = "abc".substr(1); // c is inferred to be of type string.\n')),(0,r.kt)("h3",{id:"type-assertions"},"Type Assertions"),(0,r.kt)("p",null,"Type assertions tell the compiler to specify a type as a particular type. Typescript allows developers to specify types, but it is the developer's responsibility to do so."),(0,r.kt)("p",null,'In other words, you\'re asserting to the compiler, "Do what I tell you to do."'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'let someValue: any = "this is a string";\n\nlet strLength: number = (someValue as string).length; // as syntax\n\n// Or\n\nlet strLength: number = (<string>someValue).length; // Not available in JSX syntax.\n')),(0,r.kt)("h3",{id:"literal-narrowing"},"Literal Narrowing"),(0,r.kt)("p",null,"Literal Narrowing is a way for Typescript to narrow literal types. A literal type is a type that represents a specific value in Typescript."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let x: 10 = 10; // x has a literal type of 10.\n")),(0,r.kt)("h3",{id:"union-types"},"Union Types"),(0,r.kt)("p",null,"Union Types is a way for Typescript to combine multiple types into a single type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let x: number | string = 10; // x has the type number or string.\n")),(0,r.kt)("h3",{id:"type-guards"},"Type Guards"),(0,r.kt)("p",null,"Type guards are a way for TypeScript to check types. There are two ways to check types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"typeof"),(0,r.kt)("li",{parentName:"ul"},"instanceof")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2,6,11,15}","{2,6,11,15}":!0},'function isNumber(x: any): x is number {\n  return typeof x === "number"; // return x instanceof Number;\n}\n\nfunction isString(x: any): x is string {\n  return typeof x === "string"; // return x instanceof String;\n}\n\nfunction padLeft(value: string, padding: string | number) {\n  // "number"\n  if (isNumber(padding)) {\n    return Array(padding + 1).join(" ") + value;\n  }\n  // "string"\n  if (isString(padding)) {\n    return padding + value;\n  }\n  throw new Error(`Expected string or number, got \'${padding}\'.`);\n}\n')),(0,r.kt)("h3",{id:"type-compatibility"},"Type Compatibility"),(0,r.kt)("p",null,"Type compatibility is a way for Typescript to ensure that types are compatible. Type compatibility is based on structural typing. Structural typing means that types are compatible if they are structurally equivalent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Named {\n  name: string; // It must have a name property.\n}\n\nclass Person {\n  name: string; // It must have a name property.\n}\n\nlet p: Named;\n\n// Structured typing is compatible because it has a name property with a string type.\n\np = new Person();\n")),(0,r.kt)("h3",{id:"type-aliases"},"Type Aliases"),(0,r.kt)("p",null,"Type Aliases are a way to define a type with a new name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'type Name = string;\n\ntype NameResolver = () => string;\n\ntype NameOrResolver = Name | NameResolver;\n\nfunction getName(n: NameOrResolver): Name {\n  if (typeof n === "string") {\n    return n;\n  } else {\n    return n();\n  }\n}\n')),(0,r.kt)("h2",{id:"interface-and-class"},"Interface and Class"),(0,r.kt)("h3",{id:"interface"},"Interface"),(0,r.kt)("p",null,"Interfaces are used to define the appearance of an object so that it meets specific requirements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst user: User = {\n  id: 1,\n  name: "John Doe",\n  email: "john@example.com",\n};\n')),(0,r.kt)("h3",{id:"class"},"Class"),(0,r.kt)("p",null,"Classes are used to create objects with specific structure and behavior."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class Animal {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  speak(): void {\n    console.log(`My name is ${this.name}`);\n  }\n}\n\nconst dog = new Animal("Buddy");\ndog.speak(); // Output : My name is Buddy\n')),(0,r.kt)("h2",{id:"module-and-namespace"},"Module and Namespace"),(0,r.kt)("h3",{id:"module"},"Module"),(0,r.kt)("p",null,"Modules help you organize and encapsulate your code. Modules can contain variables, functions, classes, and more."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="math.ts"',title:'"math.ts"'},"export function add(a: number, b: number): number {\n  return a + b;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="subtraction.ts"',title:'"subtraction.ts"'},"export function subtract(a: number, b: number): number {\n  return a - b;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=index.ts",title:"index.ts"},'import { add } from "./math";\nimport { subtract } from "./subtraction";\n\nconsole.log(add(1, 2)); // Output : 3\nconsole.log(subtract(5, 3)); // Output : 2\n')),(0,r.kt)("h3",{id:"namespace"},"Namespace"),(0,r.kt)("p",null,"Namespaces are another way to organize your code. Namespaces help you avoid name conflicts and group related functions together:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"namespace Geometry {\n  export interface Point {\n    x: number;\n    y: number;\n  }\n\n  export function calculateDistance(p1: Point, p2: Point): number {\n    const dx = p1.x - p2.x;\n    const dy = p1.y - p2.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n}\n\nconst point1: Geometry.Point = { x: 0, y: 0 };\nconst point2: Geometry.Point = { x: 3, y: 4 };\nconst distance: number = Geometry.calculateDistance(point1, point2);\n\nconsole.log(distance); // Output: 5\n")))}d.isMDXComponent=!0},9451:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/preview-3be9bb8cbd34d15da2730cea25895f50.png"}}]);